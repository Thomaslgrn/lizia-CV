import streamlit as st
import pdfplumber
import docx
import re
import pandas as pd
from io import BytesIO
import tempfile
import os
from datetime import datetime, timedelta
import uuid
import json

# Import de la configuration Google Meet
try:
    from google_meet_config import (
        create_google_calendar_service, 
        create_google_meet_event, 
        get_available_slots,
        handle_oauth_authentication,
        check_oauth_status,
        clear_oauth_tokens,
        send_gmail_message,
        create_gmail_service
    )
    GOOGLE_MEET_AVAILABLE = True
except ImportError:
    GOOGLE_MEET_AVAILABLE = False
    st.warning("‚ö†Ô∏è Module Google Meet non disponible. Installation des d√©pendances requise.")

# Configuration de la page
st.set_page_config(
    page_title="Extracteur de CV - Lizia",
    page_icon="üìÑ",
    layout="wide"
)

# Titre de l'application
st.title("üìÑ Extracteur Automatique de CV")
st.markdown("---")

# Affichage du bouton Se d√©connecter en haut de page (plus de sidebar)
if GOOGLE_MEET_AVAILABLE:
    is_authenticated, status_message = check_oauth_status()
    if is_authenticated:
        st.success(status_message)
        if st.button("üîì Se d√©connecter"):
            clear_oauth_tokens()
            st.rerun()
    else:
        st.warning(status_message)
        credentials = handle_oauth_authentication()
        if credentials:
            st.rerun()

def extract_text_from_pdf(pdf_file):
    """Extrait le texte d'un fichier PDF"""
    try:
        with pdfplumber.open(pdf_file) as pdf:
            text = ""
            for page in pdf.pages:
                text += page.extract_text() or ""
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du PDF: {e}")
        return ""

def extract_text_from_docx(docx_file):
    """Extrait le texte d'un fichier DOCX"""
    try:
        doc = docx.Document(docx_file)
        text = ""
        for paragraph in doc.paragraphs:
            text += paragraph.text + "\n"
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du DOCX: {e}")
        return ""

def extract_email(text):
    """Extrait l'adresse email du texte"""
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    emails = re.findall(email_pattern, text)
    return emails[0] if emails else ""

def extract_phone(text):
    """Extrait le num√©ro de t√©l√©phone du texte"""
    # Patterns pour diff√©rents formats de t√©l√©phone
    phone_patterns = [
        r'(\+33|0)[1-9](\d{8})',  # Format fran√ßais
        r'(\+33|0)[1-9][\s.-]?(\d{2}[\s.-]?){4}',  # Avec espaces/points/tirets
        r'(\+33|0)[1-9][\s.-]?(\d{2}[\s.-]?){3}\d{2}',  # Format alternatif
    ]
    
    for pattern in phone_patterns:
        phones = re.findall(pattern, text)
        if phones:
            # Nettoyer et formater le num√©ro
            phone = ''.join(phones[0])
            phone = re.sub(r'[\s.-]', '', phone)
            if phone.startswith('0'):
                phone = '+33' + phone[1:]
            return phone
    
    return ""

def detect_contract_type(text):
    """D√©tecte le type de contrat dans le texte"""
    text_lower = text.lower()
    
    contract_keywords = {
        'Alternance': ['alternance', 'apprentissage', 'contrat d\'apprentissage'],
        'Stage': ['stage', 'internship', 'stagiare'],
        'CDI': ['cdi', 'contrat √† dur√©e ind√©termin√©e', 'permanent'],
        'CDD': ['cdd', 'contrat √† dur√©e d√©termin√©e', 'temporaire', 'mission'],
        'Freelance': ['freelance', 'freelancer', 'ind√©pendant', 'consultant'],
        'Int√©rim': ['int√©rim', 'interim', 'temporaire']
    }
    
    for contract_type, keywords in contract_keywords.items():
        for keyword in keywords:
            if keyword in text_lower:
                return contract_type
    
    return "√Ä compl√©ter"

def extract_duration(text):
    """Extrait la dur√©e mentionn√©e dans le texte"""
    duration_patterns = [
        r'(\d+)\s*(mois|month)',  # 6 mois, 3 months
        r'(\d+)\s*(semaines?|weeks?)',  # 2 semaines, 1 week
        r'(\d+)\s*(jours?|days?)',  # 5 jours, 3 days
        r'(\d+)\s*(ans?|years?)',  # 2 ans, 1 year
    ]
    
    text_lower = text.lower()
    for pattern in duration_patterns:
        matches = re.findall(pattern, text_lower)
        if matches:
            number, unit = matches[0]
            return f"{number} {unit}"
    
    return "√Ä compl√©ter"

def generate_message(email, contract_type, duration):
    """G√©n√®re un message automatique"""
    if contract_type == "√Ä compl√©ter":
        contract_phrase = "un poste"
    else:
        contract_phrase = f"un poste en {contract_type}"
    
    message = f"""Bonjour,

Merci pour votre candidature. Nous avons bien re√ßu votre CV pour {contract_phrase}."""
    
    
    
    message += """

Nous reviendrons vers vous sous peu.

Cordialement,
L'√©quipe RH"""
    
    return message

def generate_interview_message(email, contract_type, interview_date, interview_time, visio_link, interviewer_name="Marie Dupont"):
    """G√©n√®re un message pour un entretien avec lien Visio"""
    if contract_type == "√Ä compl√©ter":
        contract_phrase = "un poste"
    else:
        contract_phrase = f"un poste en {contract_type}"
    
    # Formatage de la date
    date_obj = datetime.strptime(interview_date, "%Y-%m-%d")
    formatted_date = date_obj.strftime("%d/%m/%Y")
    
    message = f"""Bonjour,

Merci pour votre candidature pour {contract_phrase}.

Nous avons le plaisir de vous convier √† un entretien :
üìÖ Date : {formatted_date}
üïê Heure : {interview_time}
üë§ Avec : {interviewer_name}

üîó Lien Visio : {visio_link}

En cas d'impossibilit√©, merci de nous contacter au plus vite.

Cordialement,
L'√©quipe RH"""
    
    return message

def generate_visio_link():
    """G√©n√®re un lien Visio fictif (fallback)"""
    meeting_id = str(uuid.uuid4())[:8]
    return f"https://meet.google.com/{meeting_id}"

def create_google_meet_link(meeting_title, start_time, duration_minutes=60):
    """
    Cr√©e un lien Google Meet via OAuth 2.0
    """
    if not GOOGLE_MEET_AVAILABLE:
        st.warning("‚ö†Ô∏è Module Google Meet non disponible. Utilisation d'un lien fictif.")
        return generate_visio_link()
    
    try:
        # Cr√©er le service Google Calendar avec OAuth 2.0
        service = create_google_calendar_service()
        
        if service:
            # Cr√©er l'√©v√©nement Meet
            meet_link = create_google_meet_event(
                service=service,
                meeting_title=meeting_title,
                start_time=start_time,
                duration_minutes=duration_minutes
            )
            
            if meet_link:
                return meet_link
            else:
                st.warning("‚ö†Ô∏è Impossible de cr√©er le lien Meet. Utilisation d'un lien fictif.")
                return generate_visio_link()
        else:
            st.warning("‚ö†Ô∏è Impossible de se connecter √† Google Calendar. Utilisation d'un lien fictif.")
            return generate_visio_link()
            
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erreur lors de la cr√©ation du lien Google Meet: {e}")
        return generate_visio_link()

def is_working_day(date):
    """V√©rifie si la date est un jour ouvrable"""
    return date.weekday() < 5  # Lundi √† vendredi

def get_available_hours():
    """Retourne les heures disponibles pour les entretiens (9h √† 20h, toutes les 15 minutes)"""
    hours = []
    for hour in range(9, 21):  # 9h √† 20h
        for minute in [0, 15, 30, 45]:  # Toutes les 15 minutes
            time_str = f"{hour:02d}:{minute:02d}"
            hours.append(time_str)
    return hours

def get_available_slots_for_date(date):
    """R√©cup√®re les cr√©neaux disponibles pour une date donn√©e via OAuth 2.0"""
    try:
        if not GOOGLE_MEET_AVAILABLE:
            return get_available_hours()
        
        # Tentative de r√©cup√©ration depuis Google Calendar avec OAuth 2.0
        service = create_google_calendar_service()
        
        if service:
            try:
                available_slots = get_available_slots(service, date.strftime("%Y-%m-%d"))
                if available_slots:
                    return available_slots
                else:
                    return get_available_hours()
            except Exception as e:
                # En cas d'erreur, on utilise les cr√©neaux par d√©faut
                st.info("‚ÑπÔ∏è Utilisation des cr√©neaux par d√©faut (Google Calendar non accessible)")
                return get_available_hours()
        else:
            return get_available_hours()
    except Exception as e:
        # En cas d'erreur, on utilise les cr√©neaux par d√©faut
        st.info("‚ÑπÔ∏è Utilisation des cr√©neaux par d√©faut (Google Calendar non accessible)")
        return get_available_hours()

def save_to_csv(data, filename="cv_extracted_data.csv"):
    """Sauvegarde les donn√©es dans un fichier CSV"""
    df = pd.DataFrame([data])
    return df.to_csv(index=False)

def save_interview_to_csv(data, filename="entretiens.csv"):
    """Sauvegarde les donn√©es d'entretien dans un fichier CSV"""
    df = pd.DataFrame([data])
    return df.to_csv(index=False)

# Interface principale
uploaded_file = st.file_uploader(
    "Choisissez un fichier CV (PDF ou DOCX)",
    type=['pdf', 'docx'],
    help="Formats accept√©s : PDF, DOCX"
)

if uploaded_file is not None:
    # Extraction du texte
    file_extension = uploaded_file.name.split('.')[-1].lower()
    
    if file_extension == 'pdf':
        text = extract_text_from_pdf(uploaded_file)
    elif file_extension == 'docx':
        text = extract_text_from_docx(uploaded_file)
    else:
        st.error("Format de fichier non support√©")
        st.stop()
    
    if text:
        # Affichage du texte extrait (optionnel)
        with st.expander("üìÑ Texte extrait du CV"):
            st.text_area("Contenu du CV", text, height=200)
        
        # Extraction automatique des informations
        extracted_email = extract_email(text)
        extracted_phone = extract_phone(text)
        detected_contract = detect_contract_type(text)
        detected_duration = extract_duration(text)
        
        # Formulaire avec les donn√©es extraites
        st.subheader("üìã Informations extraites")
        
        col1, col2 = st.columns(2)
        
        with col1:
            email = st.text_input(
                "üìß Adresse e-mail",
                value=extracted_email,
                placeholder="exemple@email.com"
            )
            
            contract_type = st.selectbox(
                "üìù Type de contrat",
                options=["√Ä compl√©ter", "Alternance", "Stage", "CDI", "CDD", "Freelance", "Int√©rim"],
                index=0 if detected_contract == "√Ä compl√©ter" else ["√Ä compl√©ter", "Alternance", "Stage", "CDI", "CDD", "Freelance", "Int√©rim"].index(detected_contract)
            )
        
        with col2:
            phone = st.text_input(
                "üìû Num√©ro de t√©l√©phone",
                value=extracted_phone,
                placeholder="+33 1 23 45 67 89"
            )
            
            duration = st.text_input(
                "‚è±Ô∏è Dur√©e",
                value=detected_duration,
                placeholder="ex: 6 mois, 3 semaines"
            )
        
        # Section entretien
        st.markdown("---")
        st.subheader("üéØ Planifier un entretien")
        
        # Avant la section entretien, initialise l'√©tat si besoin
        if 'show_plan_entretien' not in st.session_state:
            st.session_state['show_plan_entretien'] = False
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Titre de la r√©union
            meeting_title = st.text_input(
                "üìù Titre de la r√©union",
                value="Entretien - Marie Dupont",
                help="Titre qui appara√Ætra dans Google Meet"
            )
            
            # S√©lection de la date avec un calendrier
            min_date = datetime.now().date() + timedelta(days=1)
            max_date = datetime.now().date() + timedelta(days=30)
            
            selected_date = st.date_input(
                "üìÖ Choisir une date",
                min_value=min_date,
                max_value=max_date,
                value=min_date,
                help="S√©lectionnez une date pour l'entretien (jours ouvrables uniquement)"
            )
            
            # V√©rification que la date s√©lectionn√©e est un jour ouvrable
            if selected_date:
                if not is_working_day(selected_date):
                    st.warning("‚ö†Ô∏è Attention : La date s√©lectionn√©e n'est pas un jour ouvrable. Veuillez choisir un jour de semaine.")
            
            # S√©lection de l'heure (avec cr√©neaux disponibles)
            available_hours = get_available_slots_for_date(selected_date)
            
            selected_time = st.selectbox(
                "üïê Choisir une heure",
                options=available_hours,
                help="S√©lectionnez une heure pour l'entretien (9h √† 20h, toutes les 15 minutes)"
            )
            
            # Nom de l'interviewer
            interviewer_name = st.text_input(
                "üë§ Nom de l'interviewer",
                value="Marie Dupont",
                placeholder="Nom de la personne qui m√®nera l'entretien"
            )
        
        with col2:
            # Dur√©e de l'entretien
            interview_duration = st.selectbox(
                "‚è±Ô∏è Dur√©e de l'entretien",
                options=["15 minutes","30 minutes", "45 minutes", "1 heure", "1h30"],
                index=2
            )
            
            # Type d'entretien
            interview_type = st.selectbox(
                "üéØ Type d'entretien",
                options=["Premier entretien", "Entretien technique", "Entretien final", "Entretien RH"]
            )
            
            # Mise √† jour du titre de la r√©union
            if 'interviewer_name' in locals() and 'interview_type' in locals():
                meeting_title = f"Entretien {interview_type} - {interviewer_name}"
        
        # Boutons d'action
        st.markdown("---")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            # G√©n√©rer le message et le stocker dans la session
            if st.button("üí¨ Message r√©ception CV", type="primary"):
                st.session_state['msg_auto'] = generate_message(email, contract_type, duration)
                st.session_state['show_msg_auto'] = True
        
        with col2:
            if st.button("üìÖ Planifier entretien", type="secondary"):
                if selected_date and selected_time and email and is_working_day(selected_date):
                    # Calculer la dur√©e en minutes
                    duration_map = {
                        "15 minutes": 15,
                        "30 minutes": 30,
                        "45 minutes": 45,
                        "1 heure": 60,
                        "1h30": 90
                    }
                    duration_minutes = duration_map.get(interview_duration, 60)
                    
                    # G√©n√©rer le lien Visio (Google Meet automatiquement)
                    visio_link = create_google_meet_link(
                        meeting_title, 
                        f"{selected_date} {selected_time}",
                        duration_minutes
                    )
                    
                    # G√©n√©rer le message d'entretien
                    interview_message = generate_interview_message(
                        email, contract_type, selected_date.strftime("%Y-%m-%d"), selected_time, 
                        visio_link, interviewer_name
                    )
                    st.session_state['msg_entretien'] = interview_message
                    st.session_state['show_msg_entretien'] = True
                    st.session_state['show_plan_entretien'] = True
                else:
                    if not is_working_day(selected_date):
                        st.error("‚ùå Veuillez s√©lectionner un jour ouvrable (lundi √† vendredi)")
                    elif not email:
                        st.error("‚ùå Veuillez renseigner l'adresse email du candidat")
                    else:
                        st.error("‚ùå Veuillez s√©lectionner une date et une heure valides")
        
        with col3:
            if st.button("üíæ Sauvegarder en CSV"):
                data = {
                    'Email': email,
                    'T√©l√©phone': phone,
                    'Type de contrat': contract_type,
                    'Dur√©e': duration,
                    'Fichier source': uploaded_file.name
                }
                
                csv = save_to_csv(data)
                st.download_button(
                    label="üì• T√©l√©charger CSV",
                    data=csv,
                    file_name="cv_extracted_data.csv",
                    mime="text/csv"
                )
        
        with col4:
            if st.button("üîÑ R√©initialiser"):
                st.rerun()

        # Affichage des messages c√¥te √† c√¥te
        if st.session_state.get('show_msg_auto') or st.session_state.get('show_plan_entretien'):
            st.markdown("---")
            st.subheader("üìù Messages g√©n√©r√©s")
            
            # Cr√©er deux colonnes pour les messages
            msg_col1, msg_col2 = st.columns(2)
            
            # Message de r√©ception CV (colonne gauche)
            with msg_col1:
                if st.session_state.get('show_msg_auto') and st.session_state.get('msg_auto'):
                    st.markdown("**üí¨ Message de r√©ception CV**")
                    message = st.session_state['msg_auto']
                    st.text_area("", message, height=200, key="msg_auto_display")
                    
                    col_btn1, col_btn2 = st.columns([1, 3])
                    with col_btn1:
                        st.button("üìã", key="copy_msg_auto")
                    with col_btn2:
                        if GOOGLE_MEET_AVAILABLE and email:
                            if st.button("‚úâÔ∏è Envoyer par email", key="send_msg_auto"):
                                with st.spinner("Envoi de l'email en cours..."):
                                    service = create_gmail_service()
                                    if service:
                                        subject = "Votre candidature chez Lizia"
                                        success = send_gmail_message(service, email, subject, message)
                                        if success:
                                            st.success(f"‚úâÔ∏è Email envoy√© √† {email}")
                                        else:
                                            st.error("‚ùå L'envoi de l'email a √©chou√©.")
                                    else:
                                        st.error("‚ùå Service Google non disponible.")
                    
                    if GOOGLE_MEET_AVAILABLE and email:
                        st.markdown(f"**üìß Email :** `{email}`")
            
            # Message d'entretien (colonne droite)
            with msg_col2:
                if st.session_state.get('show_plan_entretien') and st.session_state.get('msg_entretien'):
                    st.markdown("**üìÖ Message d'entretien**")
                    interview_message = st.session_state['msg_entretien']
                    st.text_area("", interview_message, height=200, key="msg_entretien_display")
                    
                    col_btn3, col_btn4 = st.columns([1, 3])
                    with col_btn3:
                        st.button("üìã", key="copy_msg_entretien")
                    with col_btn4:
                        if GOOGLE_MEET_AVAILABLE and email:
                            if st.button("‚úâÔ∏è Envoyer par email", key="send_msg_entretien"):
                                with st.spinner("Envoi de l'email en cours..."):
                                    service = create_gmail_service()
                                    if service:
                                        subject = "Convocation √† un entretien chez Lizia"
                                        success = send_gmail_message(service, email, subject, interview_message)
                                        if success:
                                            st.success(f"‚úâÔ∏è Email d'entretien envoy√© √† {email}")
                                        else:
                                            st.error("‚ùå L'envoi de l'email d'entretien a √©chou√©.")
                                    else:
                                        st.error("‚ùå Service Google non disponible.")
                    
                    if GOOGLE_MEET_AVAILABLE and email:
                        st.markdown(f"**üìß Email :** `{email}`")
                    
                    # Bouton pour sauvegarder l'entretien
                    if st.button("üíæ Sauvegarder l'entretien", key="save_entretien"):
                        interview_data = {
                            'Email': email,
                            'T√©l√©phone': phone,
                            'Type de contrat': contract_type,
                            'Date entretien': selected_date.strftime("%Y-%m-%d"),
                            'Heure entretien': selected_time,
                            'Dur√©e': interview_duration,
                            'Type entretien': interview_type,
                            'Interviewer': interviewer_name,
                            'Lien Visio': visio_link,
                            'Fichier source': uploaded_file.name
                        }
                        csv = save_interview_to_csv(interview_data)
                        st.download_button(
                            label="üì• T√©l√©charger CSV entretien",
                            data=csv,
                            file_name="entretien_planifie.csv",
                            mime="text/csv"
                        )

else:
    # Page d'accueil
    st.markdown("""
    ### üéØ Comment utiliser l'application :
    
    1. **Uploadez votre CV** : Glissez-d√©posez ou s√©lectionnez un fichier PDF ou DOCX
    2. **V√©rifiez les donn√©es** : Les informations seront extraites automatiquement
    3. **Compl√©tez si n√©cessaire** : Modifiez les champs vides ou incorrects
    4. **Planifiez un entretien** : Choisissez une date et une heure dans le calendrier
    5. **G√©n√©rez le message** : Cr√©ez un message automatique pour le candidat
    6. **Sauvegardez** : Exportez les donn√©es en CSV si besoin
    
    ---
    
    ### üîß Fonctionnalit√©s :
    - ‚úÖ Extraction automatique d'emails et t√©l√©phones
    - ‚úÖ D√©tection du type de contrat (CDI, CDD, Stage, etc.)
    - ‚úÖ Identification de la dur√©e mentionn√©e
    - ‚úÖ Planification d'entretiens avec calendrier interactif
    - ‚úÖ G√©n√©ration automatique de liens Visio (Google Meet avec OAuth 2.0)
    - ‚úÖ Messages automatiques personnalis√©s
    - ‚úÖ Export en CSV
    - ‚úÖ Interface intuitive et responsive
    """)
